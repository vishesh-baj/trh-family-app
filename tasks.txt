TheRapidhire Employee Dashboard
1. Header for all pages.
    Recommendations: -
    Use company logo and Logout button on right side of navbar.

2. Footer for all pages.
    Recommendation: -
    use copyrights for and company invention year.

3. User(Admin) can login with email and password
    Recommendations: - 
      Login form with input fileds of username and password.

4. Dashboard for all Employees.
    Recommendations: -
    List should be display with category of team or department using tabs
    Name and department  

5. Employee details form.
   Recommendations: -
   In this section two scenario which given below: 
   a.  If user click on employee row botton user should be redirect on user details form to fill detail.
  b. If employee details already filled on button click user should redirect profile detail page.
 Note: user can update their profile details.

6. Profile form.
    Recommendations: 
   Form filds
    1. First Name
    2. Last Name
    3. Date of bitrth
    4. Father firstName
    5. Father lastName
    6. Mother Name
    7. Contact no.
    8. Emergency Contact No.
    9. Married status
    10. Local Address
    11. City / Town
   12. State
   13. Pincode
   14. Permanent Address
   15. Aadhar No (Unique)
   16. Any other identity
   17. Department
   18. Joining date
   19. Work Experience
   20. Higher Qualification
   21. Blood group
   22. profile picture

Note:  Submit Button should after form.







<div className="max-w-5xl  flex-1 px-8 py-4 mx-auto mt-16 bg-white rounded-lg shadow-lg my-10 dark:bg-gray-800">
  {/* Image */}
  <div className="flex justify-center -mt-16 md:justify-end">
    <img
      className="object-cover hover:opacity-80 cursor-pointer w-20 h-20 border-2 border-teal-500 rounded-full dark:border-teal-400"
      alt="Testimonial avatar"
      src="https://images.unsplash.com/photo-1499714608240-22fc6ad53fb2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=76&q=80"
    />
  </div>

  <h1 className="mt-2 pb-2 w-1/2 border-b-4 border-teal-400 text-2xl md:text-4xl lg:text-6xl font-semibold  dark:text-white md:mt-0">
    <span className="text-teal-400 ">E</span>
    mployee{"  "}
    <span className="text-teal-400 ">D</span>
    etails
  </h1>

  <div className="w-full">
    <div className="max-w-[992px] h-auto grid grid-cols-12 mt-10 gap-5 ">
      {/* User details container */}

      <div className="col-start-1  col-end-12 md:col-end-12 border border-teal-400 rounded-xl">
        <div className="flex flex-col md:flex-row">
          <div className=" w-full p-5 md:p-10">
            {Object.keys(user)
              .slice(1, 12)
              .map((field) => (
                <h1
                  key={user}
                  className="text-lg font-semibold py-1 items-center text-black dark:text-teal-400"
                >
                  {field.toUpperCase()}:
                  <span className="text-teal-400 dark:text-white">
                    {" "}
                    {user[field]}
                  </span>
                </h1>
              ))}
          </div>

          <div className=" w-full p-5 md:p-10">
            {Object.keys(user)
              .slice(13, 23)
              .map((field) => (
                <h1 className="text-lg font-semibold py-1 items-center text-black dark:text-teal-400">
                  {field.toUpperCase()}:{" "}
                  <span className="text-teal-400 dark:text-white">
                    {" "}
                    {user[field]}
                  </span>
                </h1>
              ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>;



I always felt like I could do anything. That’s the main thing
                  people are controlled by! Thoughts- their perception of
                  themselves! They're slowed down by their perception of
                  themselves. If you're taught you can’t do anything, you won’t
                  do anything. I was taught I could do everything.
                </p>





User detaiuls 


import React, { useState } from "react";
import { useSelector } from "react-redux";
import UserInfoCard from "../components/SubComponents/UserInfoCard";
import Sidebar from "../components/Sidebar";
import { convertCamelCase, formArray } from "../app/helpers";
import { MdOutlineSettings } from "react-icons/md";
import FormInput from "../components/SubComponents/FormInput";
import { GrClose } from "react-icons/gr";
import { MdDeleteOutline } from "react-icons/md";
import { deleteEmployee } from "../app/api";
import { useNavigate } from "react-router-dom";

const UserDetails = () => {
  const navigate = useNavigate();
  const [showModal, setShowModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [formInputObj, setFormInputObj] = useState({
    firstName: "",
    lastName: "",
    dateOfBirth: "",
    fatherFirstName: "",
    fatherLastName: "",
    motherName: "",
    contactNo: "",
    emergencyContactNo: "",
    marriedStatus: "",
    localAddress: "",
    cityOrTown: "",
    state: "",
    pinCode: "",
    permanentAddress: "",
    email: "",
    adhaarNo: "",
    anyOtherIdentity: "",
    role: "",
    joiningDate: "",
    workExperience: "",
    higherQualification: "",
    bloodGroup: "",
    profilePicture: "",
  });

  const [fieldsToEdit, setFieldsToEdit] = useState([]);

  const user = useSelector((state) => state.selectedUser);
  console.log(user);

  let arr = [];

  // MODAL LOGIC
  const changeToNumber = () => {
    formInputObj.contactNo = Number(formInputObj.contactNo);
    formInputObj.emergencyContactNo = Number(formInputObj.emergencyContactNo);
    formInputObj.pinCode = Number(formInputObj.pinCode);
    formInputObj.adhaarNo = Number(formInputObj.adhaarNo);
  };
  // * handles the onChange foreach input

  const handleChange = (e) => {
    setFormInputObj({ ...formInputObj, [e.target.name]: e.target.value });
  };

  // * Submit the form

  const handleSubmit = async (e) => {
    e.preventDefault();
    changeToNumber();

    console.log(user);

    let formData = new FormData();
    for (let key in formInputObj) {
      formData.append(key, formInputObj[key]);
    }
    console.log(formData);
  };

  return (
    <React.Fragment>
      <Sidebar />
      <div className="mt-20 md:ml-64 h-auto bg-teal-50  dark:bg-gray-700">
        <div className="p-10 flex-col lg:flex-row flex gap-10">
          {/* personal Details */}
          <div className=" p-10 w-full lg:w-1/2 hover:shadow-xl hover:scale-105 hover:shadow-gray-200 hover:bg-gray-100 transiition ease-in-out duration-300 h-[80vh] bg-teal-50 dark:bg-gray-700 rounded-xl shadow-lg shadow-gray-200 cursor-pointer dark:shadow-gray-800 dark:hover:shadow-gray-800">
            <div className="flex justify-between">
              <h1 className=" font-semibold text-3xl lg:text-4xl dark:text-white text-black">
                <span className="text-teal-400">P</span>ersonal{" "}
                <span className="text-teal-400">D</span>
                etails
              </h1>

              <div className="flex justify-around">
                <MdOutlineSettings
                  onClick={() => setShowModal(true)}
                  size={30}
                  className="text-teal-400 animate-spin"
                />
                <MdDeleteOutline
                  onClick={() => {
                    setShowDeleteModal(true);
                  }}
                  size={30}
                  className="text-red-400 animate-pulse"
                />
              </div>
            </div>
            {Object.entries(user)
              .slice(1, 12)
              .map((entry) => (
                <UserInfoCard
                  entry1={convertCamelCase(entry[0])}
                  entry2={entry[1]}
                />
              ))}
          </div>
          {/* other details wrapper */}
          <div className="flex w-full lg:w-1/2 h-[80vh] flex-col gap-10">
            {/* other details one */}
            <div className="w-full bg-teal-50 dark:bg-gray-700 h-[40vh] rounded-xl shadow-lg shadow-gray-200 hover:bg-gray-100 cursor-pointer hover:shadow-xl hover:scale-105 dark:hover:shadow-gray-800  dark:shadow-gray-800 hover:shadow-gray-200 transiition ease-in-out duration-300 p-10">
              <h1 className=" font-semibold text-3xl lg:text-4xl dark:text-white text-black">
                <span className="text-teal-400">L</span>ocation{" "}
                <span className="text-teal-400">D</span>
                etails
              </h1>
              {Object.entries(user)
                .slice(13, 17)
                .map((entry) => (
                  <UserInfoCard
                    entry1={convertCamelCase(entry[0])}
                    entry2={entry[1]}
                  />
                ))}
            </div>
            {/* other details two  */}
            <div className="w-full bg-teal-50 dark:bg-gray-700 h-[40vh] rounded-xl shadow-lg shadow-gray-200 hover:bg-gray-100 cursor-pointer hover:shadow-xl hover:scale-105 dark:hover:shadow-gray-800  dark:shadow-gray-800 hover:shadow-gray-200 transiition ease-in-out duration-300 p-10 ">
              <h1 className=" font-semibold text-3xl lg:text-4xl dark:text-white text-black">
                <span className="text-teal-400">O</span>ther{" "}
                <span className="text-teal-400">D</span>
                etails
              </h1>
              {Object.entries(user)
                .slice(18, 23)
                .map((entry) => (
                  <UserInfoCard
                    entry1={convertCamelCase(entry[0])}
                    entry2={entry[1]}
                  />
                ))}
            </div>
          </div>
        </div>
      </div>

      {/* Edit Modal */}

      {showModal && (
        <>
          <div
            className={`justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none   transition ease-in duration-300`}
          >
            <div className=" my-6 mx-auto w-[70vw] h-[80vh] md:w-1/2 md:h-1/2 fixed overflow-scroll rounded-xl ">
              {/*content*/}
              <div className="border-0  shadow-lg relative flex flex-col w-full bg-white  dark:bg-gray-700 outline-none focus:outline-none rounded-xl ">
                {/*header*/}
                <div className="flex items-start justify-between p-5  rounded-t">
                  <h3 className="text-3xl font-semibold dark:text-white">
                    Edit Employee Details
                  </h3>
                  <button
                    className="p-1 ml-auto bg-transparent border-0 text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none"
                    onClick={() => setShowModal(false)}
                  >
                    <span className="bg-transparent text-black opacity-5 h-6 w-6 text-2xl block outline-none focus:outline-none">
                      ×
                    </span>
                  </button>
                </div>
                {/* FORM */}
                <div className=" p-6 flex-auto">
                  <form onSubmit={handleSubmit}>
                    <div className="flex ">
                      {/* INPUTS*/}
                      {/* {formArray.map((entry, idx) => {
                        arr.push(user[entry.name]);
                        console.log(arr);

                        return (
                          <FormInput
                            key={entry.name}
                            id={entry.id}
                            name={entry.name}
                            label={entry.label}
                            type={entry.type}
                            handleChange={handleChange}
                            defaultValue={arr[idx]}
                          />
                        );
                      })} */}
                      <h1 className="text-lg text-white">
                        Which Fields would you like to edit ?
                      </h1>

                      <div>
                        <button className="bg-teal-400 text-white px-5 py-2 rounded-lg">
                          Yes
                        </button>
                      </div>
                    </div>

                    {/* SUBMIT BUTTON */}
                    {/* <div className="flex justify-end mt-6">
                      <button
                        className="text-red-500 border border-red-800 hover:bg-red-800 rounded-md font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150"
                        type="button"
                        onClick={() => setShowModal(false)}
                      >
                        Close
                      </button>
                      <button
                        onClick={() => setShowModal(false)}
                        type="submit"
                        className="px-6 py-2 leading-5 text-white transition-colors duration-200 transform bg-gray-700 rounded-md hover:bg-gray-600 focus:outline-none focus:bg-gray-600"
                      >
                        Save
                      </button>
                    </div> */}
                  </form>
                </div>
                {/*footer*/}
                <div className="flex items-center justify-end p-6  rounded-b"></div>
              </div>
            </div>
          </div>
          <GrClose />
          <div className="opacity-80 fixed inset-0 z-40 bg-black"></div>
        </>
      )}

      {/*Delete Modal */}
      {showDeleteModal && (
        <>
          <div
            className={`justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none   transition ease-in duration-300 `}
          >
            <div className=" my-6 mx-auto md:w-1/2 md:h-1/2 w-[70vw] h-[50vh] fixed overflow-scroll  ">
              {/*content*/}
              <div className="border-0  shadow-lg relative flex flex-col w-full bg-white rounded-xl  dark:bg-gray-700 outline-none focus:outline-none ">
                {/*header*/}
                <div className="flex items-start justify-between p-5  rounded-t">
                  <h3 className="text-3xl font-semibold dark:text-white">
                    Delete Employee
                  </h3>
                  <button
                    className="p-1 ml-auto bg-transparent border-0 text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none"
                    onClick={() => setShowDeleteModal(false)}
                  >
                    <span className="bg-transparent text-black opacity-5 h-6 w-6 text-2xl block outline-none focus:outline-none">
                      ×
                    </span>
                  </button>
                </div>
                {/* FORM */}
                <div className=" p-6 flex-auto">
                  <form onSubmit={handleSubmit}>
                    <div className="flex flex-col md:flex-row justify-between  ">
                      <h1 className=" text-black dark:text-white text-lg">
                        Are you sure you want to delete {user.firstName}{" "}
                        {user.lastName}'s data ?
                      </h1>
                      <div className="flex gap-5 mt-5">
                        <button
                          onClick={() => {
                            deleteEmployee(user._id);
                            navigate("/dashboard");
                          }}
                          className="bg-teal-400 text-white px-5 py-2 rounded-lg"
                        >
                          Yes
                        </button>
                        <button
                          onClick={() => setShowDeleteModal(false)}
                          className="bg-red-400 text-white px-5 py-2 rounded-lg"
                        >
                          No
                        </button>
                      </div>
                    </div>
                  </form>
                </div>
                {/*footer*/}
                <div className="flex items-center justify-end p-6  border-solid rounded-b"></div>
              </div>
            </div>
          </div>
          <GrClose />

          <div
            onClick={() => setShowDeleteModal(false)}
            className="opacity-80 fixed inset-0 z-40 bg-black"
          ></div>
        </>
      )}
    </React.Fragment>
  );
};

export default UserDetails;
